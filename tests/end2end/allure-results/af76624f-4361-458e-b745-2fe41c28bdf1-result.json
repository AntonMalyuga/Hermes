{"name": "Проработка строительного проекта", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.001\n  (Session info: chrome=121.0.6167.140)\nStacktrace:\n\tGetHandleVerifier [0x00F31673+52979]\n\t(No symbol) [0x00EB7961]\n\t(No symbol) [0x00D9DD3D]\n\t(No symbol) [0x00D8F03A]\n\t(No symbol) [0x00D8EE94]\n\t(No symbol) [0x00D8D84D]\n\t(No symbol) [0x00D8E0ED]\n\t(No symbol) [0x00D98A8A]\n\t(No symbol) [0x00DA6F16]\n\t(No symbol) [0x00DAA176]\n\t(No symbol) [0x00D8E56D]\n\t(No symbol) [0x00DA6D99]\n\t(No symbol) [0x00E0B31D]\n\t(No symbol) [0x00DF4286]\n\t(No symbol) [0x00DCC063]\n\t(No symbol) [0x00DCCECD]\n\tGetHandleVerifier [0x01248D83+3294723]\n\tGetHandleVerifier [0x01286CC2+3548482]\n\tGetHandleVerifier [0x01281C9C+3527964]\n\tGetHandleVerifier [0x00FC870E+671630]\n\t(No symbol) [0x00EC1EB4]\n\t(No symbol) [0x00EBD808]\n\t(No symbol) [0x00EBD92D]\n\t(No symbol) [0x00EAF7E0]\n\tBaseThreadInitThunk [0x75FFFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77637B1E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77637AEE+238]", "trace": "request = <SubRequest 'driver' for <Function test_end_2_end_project_b2c>>\nbase_url = 'https://hermes-test.rt.ru/'\n\n    @pytest.fixture()\n    def driver(request, base_url):\n        browser = request.config.getoption('--browser')\n    \n        if browser == 'chrome':\n            driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))\n        elif browser == 'firefox':\n            driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()))\n        else:\n            raise ValueError(f'Браузер {browser} не поддерживается')\n    \n        request.addfinalizer(driver.quit)\n    \n        def open(path=''):\n            return driver.get(base_url + path)\n    \n        driver.maximize_window()\n        driver.implicitly_wait(5)\n    \n        driver.open = open\n>       driver.open()\n\n..\\..\\conftest.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\conftest.py:51: in open\n    return driver.get(base_url + path)\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023024C4E1D0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: -...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77637B1E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77637AEE+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.001\nE         (Session info: chrome=121.0.6167.140)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00F31673+52979]\nE       \t(No symbol) [0x00EB7961]\nE       \t(No symbol) [0x00D9DD3D]\nE       \t(No symbol) [0x00D8F03A]\nE       \t(No symbol) [0x00D8EE94]\nE       \t(No symbol) [0x00D8D84D]\nE       \t(No symbol) [0x00D8E0ED]\nE       \t(No symbol) [0x00D98A8A]\nE       \t(No symbol) [0x00DA6F16]\nE       \t(No symbol) [0x00DAA176]\nE       \t(No symbol) [0x00D8E56D]\nE       \t(No symbol) [0x00DA6D99]\nE       \t(No symbol) [0x00E0B31D]\nE       \t(No symbol) [0x00DF4286]\nE       \t(No symbol) [0x00DCC063]\nE       \t(No symbol) [0x00DCCECD]\nE       \tGetHandleVerifier [0x01248D83+3294723]\nE       \tGetHandleVerifier [0x01286CC2+3548482]\nE       \tGetHandleVerifier [0x01281C9C+3527964]\nE       \tGetHandleVerifier [0x00FC870E+671630]\nE       \t(No symbol) [0x00EC1EB4]\nE       \t(No symbol) [0x00EBD808]\nE       \t(No symbol) [0x00EBD92D]\nE       \t(No symbol) [0x00EAF7E0]\nE       \tBaseThreadInitThunk [0x75FFFCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77637B1E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77637AEE+238]\n\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: TimeoutException"}, "start": 1707130380882, "stop": 1707130380882, "uuid": "ce19c9c0-734d-43a9-829e-96a2e66e6fdf", "historyId": "7b17ce76f0a8afccd9146fde65de5afe", "testCaseId": "7b17ce76f0a8afccd9146fde65de5afe", "fullName": "tests.end2end.test_end_2_end_project_b2c#test_end_2_end_project_b2c", "labels": [{"name": "feature", "value": "Форма создания строительного проекта B2C"}, {"name": "parentSuite", "value": "tests.end2end"}, {"name": "suite", "value": "test_end_2_end_project_b2c"}, {"name": "host", "value": "WGD02RTI2189"}, {"name": "thread", "value": "23744-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.end2end.test_end_2_end_project_b2c"}]}