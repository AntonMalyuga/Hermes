{"name": "Проработка строительного проекта", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=121.0.6167.185)\nStacktrace:\n\tGetHandleVerifier [0x003AE123+48179]\n\t(No symbol) [0x00335D01]\n\t(No symbol) [0x0021D72D]\n\t(No symbol) [0x0025565E]\n\t(No symbol) [0x0025586B]\n\t(No symbol) [0x0028C5B2]\n\t(No symbol) [0x00273CD4]\n\t(No symbol) [0x0028AA1E]\n\t(No symbol) [0x00273A26]\n\t(No symbol) [0x0024B7BC]\n\t(No symbol) [0x0024C62D]\n\tGetHandleVerifier [0x006C7C33+3299139]\n\tGetHandleVerifier [0x00705BF2+3553026]\n\tGetHandleVerifier [0x00700BCC+3532508]\n\tGetHandleVerifier [0x0044494E+664670]\n\t(No symbol) [0x00340AB4]\n\t(No symbol) [0x0033BF08]\n\t(No symbol) [0x0033C02D]\n\t(No symbol) [0x0032DD00]\n\tBaseThreadInitThunk [0x7632FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x770E7B1E+286]\n\tRtlGetAppContainerNamedObjectPath [0x770E7AEE+238]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3f362cb898c623ae4eaed75397415c7a\")>\n\n    @allure.feature('Форма создания строительного проекта B2C')\n    @allure.title('Проработка строительного проекта')\n    def test_end_2_end_project_b2c(driver):\n>       UserLoginForm(driver).autorization_default()\n\ntest_end_2_end_project_b2c.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\page_objects\\elements\\UserLoginForm.py:24: in autorization_default\n    self.find_element(self._LOCATOR_INPUT_LOGIN).send_keys(LOGIN)\n..\\..\\page_objects\\BasePage.py:26: in find_element\n    element = self._driver.find_element(locator)\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000015B6EEF0610>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'using\\' must be a string...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x770E7B1E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x770E7AEE+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\nE         (Session info: chrome=121.0.6167.185)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x003AE123+48179]\nE       \t(No symbol) [0x00335D01]\nE       \t(No symbol) [0x0021D72D]\nE       \t(No symbol) [0x0025565E]\nE       \t(No symbol) [0x0025586B]\nE       \t(No symbol) [0x0028C5B2]\nE       \t(No symbol) [0x00273CD4]\nE       \t(No symbol) [0x0028AA1E]\nE       \t(No symbol) [0x00273A26]\nE       \t(No symbol) [0x0024B7BC]\nE       \t(No symbol) [0x0024C62D]\nE       \tGetHandleVerifier [0x006C7C33+3299139]\nE       \tGetHandleVerifier [0x00705BF2+3553026]\nE       \tGetHandleVerifier [0x00700BCC+3532508]\nE       \tGetHandleVerifier [0x0044494E+664670]\nE       \t(No symbol) [0x00340AB4]\nE       \t(No symbol) [0x0033BF08]\nE       \t(No symbol) [0x0033C02D]\nE       \t(No symbol) [0x0032DD00]\nE       \tBaseThreadInitThunk [0x7632FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x770E7B1E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x770E7AEE+238]\n\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "steps": [{"name": "Авторизовываюсь под базовым пользователем", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=121.0.6167.185)\nStacktrace:\n\tGetHandleVerifier [0x003AE123+48179]\n\t(No symbol) [0x00335D01]\n\t(No symbol) [0x0021D72D]\n\t(No symbol) [0x0025565E]\n\t(No symbol) [0x0025586B]\n\t(No symbol) [0x0028C5B2]\n\t(No symbol) [0x00273CD4]\n\t(No symbol) [0x0028AA1E]\n\t(No symbol) [0x00273A26]\n\t(No symbol) [0x0024B7BC]\n\t(No symbol) [0x0024C62D]\n\tGetHandleVerifier [0x006C7C33+3299139]\n\tGetHandleVerifier [0x00705BF2+3553026]\n\tGetHandleVerifier [0x00700BCC+3532508]\n\tGetHandleVerifier [0x0044494E+664670]\n\t(No symbol) [0x00340AB4]\n\t(No symbol) [0x0033BF08]\n\t(No symbol) [0x0033C02D]\n\t(No symbol) [0x0032DD00]\n\tBaseThreadInitThunk [0x7632FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x770E7B1E+286]\n\tRtlGetAppContainerNamedObjectPath [0x770E7AEE+238]\n\n", "trace": "  File \"C:\\Users\\Anton.S.Malyuga\\PycharmProjects\\Develop\\Hermes\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anton.S.Malyuga\\PycharmProjects\\Develop\\Hermes\\page_objects\\elements\\UserLoginForm.py\", line 24, in autorization_default\n    self.find_element(self._LOCATOR_INPUT_LOGIN).send_keys(LOGIN)\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anton.S.Malyuga\\PycharmProjects\\Develop\\Hermes\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anton.S.Malyuga\\PycharmProjects\\Develop\\Hermes\\page_objects\\BasePage.py\", line 26, in find_element\n    element = self._driver.find_element(locator)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anton.S.Malyuga\\PycharmProjects\\Develop\\Hermes\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 741, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anton.S.Malyuga\\PycharmProjects\\Develop\\Hermes\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Anton.S.Malyuga\\PycharmProjects\\Develop\\Hermes\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "Нахожу элемент по селектору ('css selector', '#username')", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=121.0.6167.185)\nStacktrace:\n\tGetHandleVerifier [0x003AE123+48179]\n\t(No symbol) [0x00335D01]\n\t(No symbol) [0x0021D72D]\n\t(No symbol) [0x0025565E]\n\t(No symbol) [0x0025586B]\n\t(No symbol) [0x0028C5B2]\n\t(No symbol) [0x00273CD4]\n\t(No symbol) [0x0028AA1E]\n\t(No symbol) [0x00273A26]\n\t(No symbol) [0x0024B7BC]\n\t(No symbol) [0x0024C62D]\n\tGetHandleVerifier [0x006C7C33+3299139]\n\tGetHandleVerifier [0x00705BF2+3553026]\n\tGetHandleVerifier [0x00700BCC+3532508]\n\tGetHandleVerifier [0x0044494E+664670]\n\t(No symbol) [0x00340AB4]\n\t(No symbol) [0x0033BF08]\n\t(No symbol) [0x0033C02D]\n\t(No symbol) [0x0032DD00]\n\tBaseThreadInitThunk [0x7632FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x770E7B1E+286]\n\tRtlGetAppContainerNamedObjectPath [0x770E7AEE+238]\n\n", "trace": "  File \"C:\\Users\\Anton.S.Malyuga\\PycharmProjects\\Develop\\Hermes\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anton.S.Malyuga\\PycharmProjects\\Develop\\Hermes\\page_objects\\BasePage.py\", line 26, in find_element\n    element = self._driver.find_element(locator)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anton.S.Malyuga\\PycharmProjects\\Develop\\Hermes\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 741, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anton.S.Malyuga\\PycharmProjects\\Develop\\Hermes\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Anton.S.Malyuga\\PycharmProjects\\Develop\\Hermes\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "locator", "value": "('css selector', '#username')"}, {"name": "second", "value": "10"}], "start": 1708599251325, "stop": 1708599251335}], "start": 1708599251325, "stop": 1708599251342}], "start": 1708599251324, "stop": 1708599251351, "uuid": "1ead0e07-d5aa-432c-bb7d-d6ec09c53336", "historyId": "7b17ce76f0a8afccd9146fde65de5afe", "testCaseId": "7b17ce76f0a8afccd9146fde65de5afe", "fullName": "tests.end2end.test_end_2_end_project_b2c#test_end_2_end_project_b2c", "labels": [{"name": "feature", "value": "Форма создания строительного проекта B2C"}, {"name": "parentSuite", "value": "tests.end2end"}, {"name": "suite", "value": "test_end_2_end_project_b2c"}, {"name": "host", "value": "WGD02RTI2189"}, {"name": "thread", "value": "13068-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.end2end.test_end_2_end_project_b2c"}]}